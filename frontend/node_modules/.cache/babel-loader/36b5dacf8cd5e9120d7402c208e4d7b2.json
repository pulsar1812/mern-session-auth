{"ast":null,"code":"import axios from 'axios';\nimport * as apiUtil from '../util/session';\nimport { RECEIVE_CURRENT_USER, LOGOUT_CURRENT_USER, RECEIVE_ERRORS, CLEAR_ERRORS } from './types';\n\nconst receiveCurrentUser = user => ({\n  type: RECEIVE_CURRENT_USER,\n  user\n});\n\nconst logoutCurrentUser = () => ({\n  type: LOGOUT_CURRENT_USER\n});\n\nconst receiveErrors = ({\n  message\n}) => ({\n  type: RECEIVE_ERRORS,\n  message\n});\n\nconst clearErrors = () => ({\n  type: CLEAR_ERRORS\n}); // Login\n\n\nexport const login = ({\n  email,\n  password\n}) => async dispatch => {\n  const res = await apiUtil.login(user);\n  const data = await res.json();\n\n  if (res.ok) {\n    return dispatch(receiveCurrentUser(data));\n  }\n\n  return dispatch(receiveErrors(data));\n}; // Signup\n\nexport const signup = ({\n  name,\n  email,\n  password\n}) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    name,\n    email,\n    password\n  });\n\n  try {\n    const res = await axios.post('/api/users', body, config);\n    dispatch({\n      type: RECEIVE_CURRENT_USER,\n      payload: res\n    });\n  } catch (err) {\n    dispatch({\n      type: RECEIVE_ERRORS\n    });\n  }\n}; // Logout\n\nexport const logout = () => async dispatch => {\n  const res = await apiUtil.logout();\n  const data = await res.json();\n\n  if (res.ok) {\n    return dispatch(logoutCurrentUser());\n  }\n\n  return dispatch(receiveErrors(data));\n};","map":{"version":3,"sources":["/Users/macbookpro/MyReact/mern-session-auth/frontend/src/actions/session.js"],"names":["axios","apiUtil","RECEIVE_CURRENT_USER","LOGOUT_CURRENT_USER","RECEIVE_ERRORS","CLEAR_ERRORS","receiveCurrentUser","user","type","logoutCurrentUser","receiveErrors","message","clearErrors","login","email","password","dispatch","res","data","json","ok","signup","name","config","headers","body","JSON","stringify","post","payload","err","logout"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAO,KAAKC,OAAZ,MAAyB,iBAAzB;AACA,SACEC,oBADF,EAEEC,mBAFF,EAGEC,cAHF,EAIEC,YAJF,QAKO,SALP;;AAOA,MAAMC,kBAAkB,GAAGC,IAAI,KAAK;AAClCC,EAAAA,IAAI,EAAEN,oBAD4B;AAElCK,EAAAA;AAFkC,CAAL,CAA/B;;AAKA,MAAME,iBAAiB,GAAG,OAAO;AAC/BD,EAAAA,IAAI,EAAEL;AADyB,CAAP,CAA1B;;AAIA,MAAMO,aAAa,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,MAAkB;AACtCH,EAAAA,IAAI,EAAEJ,cADgC;AAEtCO,EAAAA;AAFsC,CAAlB,CAAtB;;AAKA,MAAMC,WAAW,GAAG,OAAO;AACzBJ,EAAAA,IAAI,EAAEH;AADmB,CAAP,CAApB,C,CAIA;;;AACA,OAAO,MAAMQ,KAAK,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAASC,EAAAA;AAAT,CAAD,KAAyB,MAAMC,QAAN,IAAkB;AAC9D,QAAMC,GAAG,GAAG,MAAMhB,OAAO,CAACY,KAAR,CAAcN,IAAd,CAAlB;AACA,QAAMW,IAAI,GAAG,MAAMD,GAAG,CAACE,IAAJ,EAAnB;;AAEA,MAAIF,GAAG,CAACG,EAAR,EAAY;AACV,WAAOJ,QAAQ,CAACV,kBAAkB,CAACY,IAAD,CAAnB,CAAf;AACD;;AACD,SAAOF,QAAQ,CAACN,aAAa,CAACQ,IAAD,CAAd,CAAf;AACD,CARM,C,CAUP;;AACA,OAAO,MAAMG,MAAM,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQR,EAAAA,KAAR;AAAeC,EAAAA;AAAf,CAAD,KAA+B,MAAMC,QAAN,IAAkB;AACrE,QAAMO,MAAM,GAAG;AACbC,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT;AADI,GAAf;AAMA,QAAMC,IAAI,GAAGC,IAAI,CAACC,SAAL,CAAe;AAAEL,IAAAA,IAAF;AAAQR,IAAAA,KAAR;AAAeC,IAAAA;AAAf,GAAf,CAAb;;AAEA,MAAI;AACF,UAAME,GAAG,GAAG,MAAMjB,KAAK,CAAC4B,IAAN,CAAW,YAAX,EAAyBH,IAAzB,EAA+BF,MAA/B,CAAlB;AAEAP,IAAAA,QAAQ,CAAC;AACPR,MAAAA,IAAI,EAAEN,oBADC;AAEP2B,MAAAA,OAAO,EAAEZ;AAFF,KAAD,CAAR;AAID,GAPD,CAOE,OAAOa,GAAP,EAAY;AACZd,IAAAA,QAAQ,CAAC;AACPR,MAAAA,IAAI,EAAEJ;AADC,KAAD,CAAR;AAGD;AACF,CArBM,C,CAuBP;;AACA,OAAO,MAAM2B,MAAM,GAAG,MAAM,MAAMf,QAAN,IAAkB;AAC5C,QAAMC,GAAG,GAAG,MAAMhB,OAAO,CAAC8B,MAAR,EAAlB;AACA,QAAMb,IAAI,GAAG,MAAMD,GAAG,CAACE,IAAJ,EAAnB;;AAEA,MAAIF,GAAG,CAACG,EAAR,EAAY;AACV,WAAOJ,QAAQ,CAACP,iBAAiB,EAAlB,CAAf;AACD;;AACD,SAAOO,QAAQ,CAACN,aAAa,CAACQ,IAAD,CAAd,CAAf;AACD,CARM","sourcesContent":["import axios from 'axios';\n\nimport * as apiUtil from '../util/session';\nimport {\n  RECEIVE_CURRENT_USER,\n  LOGOUT_CURRENT_USER,\n  RECEIVE_ERRORS,\n  CLEAR_ERRORS\n} from './types';\n\nconst receiveCurrentUser = user => ({\n  type: RECEIVE_CURRENT_USER,\n  user\n});\n\nconst logoutCurrentUser = () => ({\n  type: LOGOUT_CURRENT_USER\n});\n\nconst receiveErrors = ({ message }) => ({\n  type: RECEIVE_ERRORS,\n  message\n});\n\nconst clearErrors = () => ({\n  type: CLEAR_ERRORS\n});\n\n// Login\nexport const login = ({ email, password }) => async dispatch => {\n  const res = await apiUtil.login(user);\n  const data = await res.json();\n\n  if (res.ok) {\n    return dispatch(receiveCurrentUser(data));\n  }\n  return dispatch(receiveErrors(data));\n};\n\n// Signup\nexport const signup = ({ name, email, password }) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n\n  const body = JSON.stringify({ name, email, password });\n\n  try {\n    const res = await axios.post('/api/users', body, config);\n\n    dispatch({\n      type: RECEIVE_CURRENT_USER,\n      payload: res\n    });\n  } catch (err) {\n    dispatch({\n      type: RECEIVE_ERRORS\n    });\n  }\n};\n\n// Logout\nexport const logout = () => async dispatch => {\n  const res = await apiUtil.logout();\n  const data = await res.json();\n\n  if (res.ok) {\n    return dispatch(logoutCurrentUser());\n  }\n  return dispatch(receiveErrors(data));\n};\n"]},"metadata":{},"sourceType":"module"}